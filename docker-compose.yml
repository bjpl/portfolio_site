version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-portfolio_db}
      POSTGRES_USER: ${DB_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-portfolio_user} -d ${DB_NAME:-portfolio_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Portfolio Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: portfolio-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3333}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-portfolio_db}
      DB_USER: ${DB_USER:-portfolio_user}
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
    volumes:
      - ./content:/app/content
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
      - hugo_cache:/app/.cache
    ports:
      - "${PORT:-3333}:${PORT:-3333}"
    networks:
      - portfolio-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3333}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./public:/usr/share/nginx/html:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - portfolio-network
    depends_on:
      - app
    profiles:
      - production

  # Backup Service (optional)
  backup:
    image: postgres:15-alpine
    container_name: portfolio-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        pg_dump -h postgres -U ${DB_USER:-portfolio_user} -d ${DB_NAME:-portfolio_db} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
        find /backups -name 'backup_*.sql' -mtime +7 -delete;
        sleep 86400;
      done"
    networks:
      - portfolio-network
    depends_on:
      - postgres
    profiles:
      - backup

networks:
  portfolio-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  hugo_cache:
    driver: local
  nginx_cache:
    driver: local