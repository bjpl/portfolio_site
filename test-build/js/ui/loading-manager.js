/**\n * Loading Manager\n * Handles loading states and UI feedback throughout the application\n */\n\nclass LoadingManager {\n    constructor() {\n        this.activeLoaders = new Map();\n        this.loadingQueue = [];\n        this.init();\n    }\n\n    init() {\n        this.createLoadingOverlay();\n        this.createToastContainer();\n        this.setupGlobalLoading();\n    }\n\n    createLoadingOverlay() {\n        // Create main loading overlay\n        const overlay = document.createElement('div');\n        overlay.id = 'global-loading-overlay';\n        overlay.className = 'loading-overlay';\n        overlay.innerHTML = `\n            <div class=\"loading-spinner\">\n                <div class=\"spinner\"></div>\n                <div class=\"loading-text\">Loading...</div>\n            </div>\n        `;\n        \n        // Add styles if not already present\n        if (!document.getElementById('loading-styles')) {\n            const styles = document.createElement('style');\n            styles.id = 'loading-styles';\n            styles.textContent = `\n                .loading-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background: rgba(255, 255, 255, 0.9);\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    z-index: 10000;\n                    opacity: 0;\n                    visibility: hidden;\n                    transition: opacity 0.3s ease, visibility 0.3s ease;\n                }\n                \n                .loading-overlay.show {\n                    opacity: 1;\n                    visibility: visible;\n                }\n                \n                [data-theme=\"dark\"] .loading-overlay {\n                    background: rgba(0, 0, 0, 0.9);\n                }\n                \n                .loading-spinner {\n                    text-align: center;\n                }\n                \n                .spinner {\n                    width: 50px;\n                    height: 50px;\n                    border: 3px solid #f3f3f3;\n                    border-top: 3px solid #667eea;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                    margin: 0 auto 1rem;\n                }\n                \n                @keyframes spin {\n                    0% { transform: rotate(0deg); }\n                    100% { transform: rotate(360deg); }\n                }\n                \n                .loading-text {\n                    color: #333;\n                    font-size: 1rem;\n                    font-weight: 500;\n                }\n                \n                [data-theme=\"dark\"] .loading-text {\n                    color: #fff;\n                }\n                \n                .inline-loader {\n                    display: inline-flex;\n                    align-items: center;\n                    gap: 0.5rem;\n                    opacity: 0;\n                    transition: opacity 0.3s ease;\n                }\n                \n                .inline-loader.show {\n                    opacity: 1;\n                }\n                \n                .inline-spinner {\n                    width: 20px;\n                    height: 20px;\n                    border: 2px solid #f3f3f3;\n                    border-top: 2px solid #667eea;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                }\n                \n                .button-loader {\n                    display: inline-flex;\n                    align-items: center;\n                    gap: 0.5rem;\n                }\n                \n                .button-spinner {\n                    width: 16px;\n                    height: 16px;\n                    border: 2px solid transparent;\n                    border-top: 2px solid currentColor;\n                    border-radius: 50%;\n                    animation: spin 1s linear infinite;\n                }\n                \n                .skeleton {\n                    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n                    background-size: 200% 100%;\n                    animation: loading 1.5s infinite;\n                }\n                \n                @keyframes loading {\n                    0% { background-position: 200% 0; }\n                    100% { background-position: -200% 0; }\n                }\n                \n                [data-theme=\"dark\"] .skeleton {\n                    background: linear-gradient(90deg, #2a2a2a 25%, #3a3a3a 50%, #2a2a2a 75%);\n                    background-size: 200% 100%;\n                }\n            `;\n            document.head.appendChild(styles);\n        }\n        \n        document.body.appendChild(overlay);\n        this.overlay = overlay;\n    }\n\n    createToastContainer() {\n        const container = document.createElement('div');\n        container.id = 'toast-container';\n        container.className = 'toast-container';\n        \n        // Add toast styles\n        const styles = document.createElement('style');\n        styles.textContent = `\n            .toast-container {\n                position: fixed;\n                top: 20px;\n                right: 20px;\n                z-index: 10001;\n                display: flex;\n                flex-direction: column;\n                gap: 10px;\n                max-width: 350px;\n            }\n            \n            .toast {\n                padding: 12px 16px;\n                border-radius: 8px;\n                color: white;\n                font-weight: 500;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n                transform: translateX(100%);\n                transition: transform 0.3s ease;\n                position: relative;\n                overflow: hidden;\n            }\n            \n            .toast.show {\n                transform: translateX(0);\n            }\n            \n            .toast.success {\n                background: #10b981;\n            }\n            \n            .toast.error {\n                background: #ef4444;\n            }\n            \n            .toast.warning {\n                background: #f59e0b;\n            }\n            \n            .toast.info {\n                background: #3b82f6;\n            }\n            \n            .toast::before {\n                content: '';\n                position: absolute;\n                bottom: 0;\n                left: 0;\n                height: 3px;\n                background: rgba(255, 255, 255, 0.3);\n                animation: toast-progress 3s linear;\n            }\n            \n            @keyframes toast-progress {\n                from { width: 100%; }\n                to { width: 0%; }\n            }\n        `;\n        \n        if (!document.getElementById('toast-styles')) {\n            styles.id = 'toast-styles';\n            document.head.appendChild(styles);\n        }\n        \n        document.body.appendChild(container);\n        this.toastContainer = container;\n    }\n\n    setupGlobalLoading() {\n        // Show loading for page navigation\n        window.addEventListener('beforeunload', () => {\n            this.showGlobalLoading('Leaving page...');\n        });\n        \n        // Hide loading when page is fully loaded\n        if (document.readyState === 'complete') {\n            this.hideGlobalLoading();\n        } else {\n            window.addEventListener('load', () => {\n                this.hideGlobalLoading();\n            });\n        }\n    }\n\n    // Global loading overlay methods\n    showGlobalLoading(message = 'Loading...') {\n        if (this.overlay) {\n            const textElement = this.overlay.querySelector('.loading-text');\n            if (textElement) {\n                textElement.textContent = message;\n            }\n            this.overlay.classList.add('show');\n        }\n    }\n\n    hideGlobalLoading() {\n        if (this.overlay) {\n            this.overlay.classList.remove('show');\n        }\n    }\n\n    // Inline loading methods\n    showInlineLoading(element, message = 'Loading...') {\n        const loaderId = 'inline-' + Math.random().toString(36).substr(2, 9);\n        const loader = document.createElement('div');\n        loader.className = 'inline-loader';\n        loader.dataset.loaderId = loaderId;\n        loader.innerHTML = `\n            <div class=\"inline-spinner\"></div>\n            <span>${message}</span>\n        `;\n        \n        element.appendChild(loader);\n        \n        // Trigger show animation\n        setTimeout(() => loader.classList.add('show'), 10);\n        \n        this.activeLoaders.set(loaderId, { element, loader });\n        return loaderId;\n    }\n\n    hideInlineLoading(loaderId) {\n        const loaderData = this.activeLoaders.get(loaderId);\n        if (loaderData) {\n            loaderData.loader.classList.remove('show');\n            setTimeout(() => {\n                if (loaderData.loader.parentNode) {\n                    loaderData.loader.parentNode.removeChild(loaderData.loader);\n                }\n            }, 300);\n            this.activeLoaders.delete(loaderId);\n        }\n    }\n\n    // Button loading methods\n    showButtonLoading(button, message = 'Loading...') {\n        if (button.dataset.originalText) {\n            return; // Already in loading state\n        }\n        \n        button.dataset.originalText = button.textContent;\n        button.disabled = true;\n        button.innerHTML = `\n            <span class=\"button-loader\">\n                <div class=\"button-spinner\"></div>\n                ${message}\n            </span>\n        `;\n    }\n\n    hideButtonLoading(button) {\n        if (button.dataset.originalText) {\n            button.textContent = button.dataset.originalText;\n            button.disabled = false;\n            delete button.dataset.originalText;\n        }\n    }\n\n    // Form loading methods\n    showFormLoading(form) {\n        const formId = 'form-' + Math.random().toString(36).substr(2, 9);\n        const inputs = form.querySelectorAll('input, select, textarea, button');\n        \n        inputs.forEach(input => {\n            input.disabled = true;\n        });\n        \n        this.activeLoaders.set(formId, { form, inputs });\n        return formId;\n    }\n\n    hideFormLoading(formId) {\n        const formData = this.activeLoaders.get(formId);\n        if (formData) {\n            formData.inputs.forEach(input => {\n                input.disabled = false;\n            });\n            this.activeLoaders.delete(formId);\n        }\n    }\n\n    // Skeleton loading methods\n    createSkeleton(element, config = {}) {\n        const { \n            lines = 3, \n            lineHeight = '1rem', \n            gap = '0.5rem',\n            width = '100%'\n        } = config;\n        \n        const skeleton = document.createElement('div');\n        skeleton.className = 'skeleton-container';\n        skeleton.innerHTML = Array(lines).fill(0).map((_, i) => {\n            const lineWidth = i === lines - 1 ? '70%' : width;\n            return `<div class=\"skeleton\" style=\"height: ${lineHeight}; width: ${lineWidth}; margin-bottom: ${gap}; border-radius: 4px;\"></div>`;\n        }).join('');\n        \n        element.appendChild(skeleton);\n        return skeleton;\n    }\n\n    removeSkeleton(skeleton) {\n        if (skeleton && skeleton.parentNode) {\n            skeleton.parentNode.removeChild(skeleton);\n        }\n    }\n\n    // Toast notifications\n    showToast(message, type = 'info', duration = 3000) {\n        const toast = document.createElement('div');\n        toast.className = `toast ${type}`;\n        toast.textContent = message;\n        \n        this.toastContainer.appendChild(toast);\n        \n        // Trigger show animation\n        setTimeout(() => toast.classList.add('show'), 10);\n        \n        // Auto remove\n        setTimeout(() => {\n            toast.classList.remove('show');\n            setTimeout(() => {\n                if (toast.parentNode) {\n                    toast.parentNode.removeChild(toast);\n                }\n            }, 300);\n        }, duration);\n        \n        return toast;\n    }\n\n    // Convenience methods for different toast types\n    showSuccess(message, duration) {\n        return this.showToast(message, 'success', duration);\n    }\n\n    showError(message, duration) {\n        return this.showToast(message, 'error', duration);\n    }\n\n    showWarning(message, duration) {\n        return this.showToast(message, 'warning', duration);\n    }\n\n    showInfo(message, duration) {\n        return this.showToast(message, 'info', duration);\n    }\n\n    // Progress tracking\n    showProgress(element, progress = 0) {\n        let progressBar = element.querySelector('.progress-bar');\n        \n        if (!progressBar) {\n            progressBar = document.createElement('div');\n            progressBar.className = 'progress-bar';\n            progressBar.innerHTML = `\n                <div class=\"progress-fill\" style=\"width: ${progress}%\"></div>\n                <div class=\"progress-text\">${progress}%</div>\n            `;\n            \n            // Add progress styles if not present\n            if (!document.getElementById('progress-styles')) {\n                const styles = document.createElement('style');\n                styles.id = 'progress-styles';\n                styles.textContent = `\n                    .progress-bar {\n                        width: 100%;\n                        height: 20px;\n                        background: #f0f0f0;\n                        border-radius: 10px;\n                        overflow: hidden;\n                        position: relative;\n                    }\n                    \n                    .progress-fill {\n                        height: 100%;\n                        background: #667eea;\n                        transition: width 0.3s ease;\n                        border-radius: 10px;\n                    }\n                    \n                    .progress-text {\n                        position: absolute;\n                        top: 50%;\n                        left: 50%;\n                        transform: translate(-50%, -50%);\n                        font-size: 0.8rem;\n                        font-weight: 500;\n                        color: #333;\n                    }\n                    \n                    [data-theme=\"dark\"] .progress-bar {\n                        background: #333;\n                    }\n                    \n                    [data-theme=\"dark\"] .progress-text {\n                        color: #fff;\n                    }\n                `;\n                document.head.appendChild(styles);\n            }\n            \n            element.appendChild(progressBar);\n        } else {\n            const fill = progressBar.querySelector('.progress-fill');\n            const text = progressBar.querySelector('.progress-text');\n            \n            if (fill) fill.style.width = `${progress}%`;\n            if (text) text.textContent = `${progress}%`;\n        }\n        \n        return progressBar;\n    }\n\n    // Utility methods\n    isLoading(identifier) {\n        return this.activeLoaders.has(identifier);\n    }\n\n    clearAllLoading() {\n        this.activeLoaders.clear();\n        this.hideGlobalLoading();\n        \n        // Clear all inline loaders\n        document.querySelectorAll('.inline-loader').forEach(loader => {\n            if (loader.parentNode) {\n                loader.parentNode.removeChild(loader);\n            }\n        });\n        \n        // Reset all buttons\n        document.querySelectorAll('button[data-original-text]').forEach(button => {\n            this.hideButtonLoading(button);\n        });\n    }\n}\n\n// Initialize global loading manager\nwindow.loadingManager = new LoadingManager();\n\n// Export for modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = LoadingManager;\n}"