/**\n * Error Boundary System\n * Handles errors gracefully throughout the application\n */\n\nclass ErrorBoundary {\n    constructor() {\n        this.errorQueue = [];\n        this.isOnline = navigator.onLine;\n        this.init();\n    }\n\n    init() {\n        this.setupGlobalErrorHandling();\n        this.setupNetworkMonitoring();\n        this.createErrorUI();\n    }\n\n    setupGlobalErrorHandling() {\n        // Catch unhandled JavaScript errors\n        window.addEventListener('error', (event) => {\n            this.handleError({\n                type: 'javascript',\n                message: event.message,\n                source: event.filename,\n                line: event.lineno,\n                column: event.colno,\n                stack: event.error?.stack\n            });\n        });\n\n        // Catch unhandled promise rejections\n        window.addEventListener('unhandledrejection', (event) => {\n            this.handleError({\n                type: 'promise',\n                message: event.reason?.message || 'Unhandled promise rejection',\n                stack: event.reason?.stack,\n                reason: event.reason\n            });\n        });\n\n        // Catch resource loading errors\n        window.addEventListener('error', (event) => {\n            if (event.target !== window) {\n                this.handleError({\n                    type: 'resource',\n                    message: `Failed to load resource: ${event.target.src || event.target.href}`,\n                    element: event.target.tagName,\n                    source: event.target.src || event.target.href\n                });\n            }\n        }, true);\n    }\n\n    setupNetworkMonitoring() {\n        window.addEventListener('online', () => {\n            this.isOnline = true;\n            this.showNetworkStatus('back online', 'success');\n            this.retryFailedRequests();\n        });\n\n        window.addEventListener('offline', () => {\n            this.isOnline = false;\n            this.showNetworkStatus('offline', 'warning');\n        });\n    }\n\n    createErrorUI() {\n        // Create error notification container\n        const container = document.createElement('div');\n        container.id = 'error-boundary-container';\n        container.className = 'error-boundary-container';\n        \n        // Add styles\n        const styles = document.createElement('style');\n        styles.id = 'error-boundary-styles';\n        styles.textContent = `\n            .error-boundary-container {\n                position: fixed;\n                top: 20px;\n                left: 20px;\n                z-index: 10002;\n                display: flex;\n                flex-direction: column;\n                gap: 10px;\n                max-width: 400px;\n                pointer-events: none;\n            }\n            \n            .error-notification {\n                background: #fee2e2;\n                border: 1px solid #fecaca;\n                color: #991b1b;\n                padding: 12px 16px;\n                border-radius: 8px;\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n                transform: translateX(-100%);\n                transition: transform 0.3s ease;\n                pointer-events: auto;\n                position: relative;\n            }\n            \n            .error-notification.show {\n                transform: translateX(0);\n            }\n            \n            .error-notification.warning {\n                background: #fef3c7;\n                border-color: #fde68a;\n                color: #92400e;\n            }\n            \n            .error-notification.success {\n                background: #dcfce7;\n                border-color: #bbf7d0;\n                color: #166534;\n            }\n            \n            .error-notification.info {\n                background: #dbeafe;\n                border-color: #bfdbfe;\n                color: #1e40af;\n            }\n            \n            [data-theme=\"dark\"] .error-notification {\n                background: #7f1d1d;\n                border-color: #991b1b;\n                color: #fecaca;\n            }\n            \n            [data-theme=\"dark\"] .error-notification.warning {\n                background: #78350f;\n                border-color: #92400e;\n                color: #fde68a;\n            }\n            \n            [data-theme=\"dark\"] .error-notification.success {\n                background: #14532d;\n                border-color: #166534;\n                color: #bbf7d0;\n            }\n            \n            [data-theme=\"dark\"] .error-notification.info {\n                background: #1e3a8a;\n                border-color: #1e40af;\n                color: #bfdbfe;\n            }\n            \n            .error-title {\n                font-weight: 600;\n                margin-bottom: 4px;\n            }\n            \n            .error-message {\n                font-size: 0.9rem;\n                margin-bottom: 8px;\n            }\n            \n            .error-actions {\n                display: flex;\n                gap: 8px;\n                margin-top: 8px;\n            }\n            \n            .error-action {\n                background: none;\n                border: 1px solid currentColor;\n                color: inherit;\n                padding: 4px 8px;\n                border-radius: 4px;\n                font-size: 0.8rem;\n                cursor: pointer;\n                transition: background-color 0.2s ease;\n            }\n            \n            .error-action:hover {\n                background-color: rgba(0, 0, 0, 0.1);\n            }\n            \n            .error-close {\n                position: absolute;\n                top: 8px;\n                right: 8px;\n                background: none;\n                border: none;\n                color: inherit;\n                cursor: pointer;\n                font-size: 1.2rem;\n                opacity: 0.7;\n            }\n            \n            .error-close:hover {\n                opacity: 1;\n            }\n            \n            .error-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.8);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 10003;\n                opacity: 0;\n                visibility: hidden;\n                transition: opacity 0.3s ease, visibility 0.3s ease;\n            }\n            \n            .error-overlay.show {\n                opacity: 1;\n                visibility: visible;\n            }\n            \n            .error-modal {\n                background: white;\n                padding: 2rem;\n                border-radius: 8px;\n                max-width: 500px;\n                width: 90%;\n                max-height: 70vh;\n                overflow-y: auto;\n            }\n            \n            [data-theme=\"dark\"] .error-modal {\n                background: #1f2937;\n                color: white;\n            }\n            \n            .error-details {\n                font-family: monospace;\n                font-size: 0.8rem;\n                background: #f5f5f5;\n                padding: 1rem;\n                border-radius: 4px;\n                margin-top: 1rem;\n                overflow-x: auto;\n                white-space: pre-wrap;\n            }\n            \n            [data-theme=\"dark\"] .error-details {\n                background: #374151;\n            }\n        `;\n        \n        document.head.appendChild(styles);\n        document.body.appendChild(container);\n        this.container = container;\n    }\n\n    handleError(errorInfo) {\n        console.error('Error caught by boundary:', errorInfo);\n        \n        // Add to error queue\n        this.errorQueue.push({\n            ...errorInfo,\n            timestamp: new Date().toISOString(),\n            id: Math.random().toString(36).substr(2, 9)\n        });\n\n        // Show user-friendly error\n        this.showErrorNotification(errorInfo);\n\n        // Log error for debugging\n        this.logError(errorInfo);\n\n        // Send to error reporting service (if configured)\n        this.reportError(errorInfo);\n    }\n\n    showErrorNotification(errorInfo) {\n        const { type, message } = errorInfo;\n        \n        let title, userMessage, severity;\n        \n        switch (type) {\n            case 'network':\n                title = 'Connection Error';\n                userMessage = 'Having trouble connecting. Please check your internet connection.';\n                severity = 'warning';\n                break;\n            case 'api':\n                title = 'Service Error';\n                userMessage = 'Service temporarily unavailable. Please try again.';\n                severity = 'error';\n                break;\n            case 'resource':\n                title = 'Loading Error';\n                userMessage = 'Some content failed to load. Page may not display correctly.';\n                severity = 'warning';\n                break;\n            case 'authentication':\n                title = 'Authentication Error';\n                userMessage = 'Please log in again to continue.';\n                severity = 'warning';\n                break;\n            case 'permission':\n                title = 'Access Denied';\n                userMessage = 'You don\\'t have permission to perform this action.';\n                severity = 'warning';\n                break;\n            case 'javascript':\n                title = 'Application Error';\n                userMessage = 'Something went wrong. The page will try to recover automatically.';\n                severity = 'error';\n                break;\n            default:\n                title = 'Unexpected Error';\n                userMessage = 'An unexpected error occurred. Please refresh the page.';\n                severity = 'error';\n        }\n\n        this.createNotification(title, userMessage, severity, errorInfo);\n    }\n\n    createNotification(title, message, severity, errorInfo) {\n        const notification = document.createElement('div');\n        notification.className = `error-notification ${severity}`;\n        notification.innerHTML = `\n            <button class=\"error-close\">×</button>\n            <div class=\"error-title\">${title}</div>\n            <div class=\"error-message\">${message}</div>\n            <div class=\"error-actions\">\n                <button class=\"error-action\" data-action=\"retry\">Retry</button>\n                <button class=\"error-action\" data-action=\"details\">Details</button>\n                <button class=\"error-action\" data-action=\"report\">Report</button>\n            </div>\n        `;\n\n        // Add event listeners\n        notification.querySelector('.error-close').addEventListener('click', () => {\n            this.removeNotification(notification);\n        });\n\n        notification.querySelectorAll('.error-action').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const action = e.target.dataset.action;\n                this.handleErrorAction(action, errorInfo, notification);\n            });\n        });\n\n        this.container.appendChild(notification);\n\n        // Show with animation\n        setTimeout(() => notification.classList.add('show'), 10);\n\n        // Auto remove after delay (except for critical errors)\n        if (severity !== 'error') {\n            setTimeout(() => {\n                this.removeNotification(notification);\n            }, 5000);\n        }\n\n        return notification;\n    }\n\n    handleErrorAction(action, errorInfo, notification) {\n        switch (action) {\n            case 'retry':\n                this.retryLastAction(errorInfo);\n                this.removeNotification(notification);\n                break;\n            case 'details':\n                this.showErrorDetails(errorInfo);\n                break;\n            case 'report':\n                this.reportError(errorInfo);\n                window.loadingManager?.showSuccess('Error report sent. Thank you!');\n                this.removeNotification(notification);\n                break;\n        }\n    }\n\n    showErrorDetails(errorInfo) {\n        const overlay = document.createElement('div');\n        overlay.className = 'error-overlay';\n        overlay.innerHTML = `\n            <div class=\"error-modal\">\n                <h3>Error Details</h3>\n                <p><strong>Type:</strong> ${errorInfo.type}</p>\n                <p><strong>Time:</strong> ${new Date(errorInfo.timestamp).toLocaleString()}</p>\n                <p><strong>Message:</strong> ${errorInfo.message}</p>\n                ${errorInfo.source ? `<p><strong>Source:</strong> ${errorInfo.source}</p>` : ''}\n                ${errorInfo.stack ? `<div class=\"error-details\">${errorInfo.stack}</div>` : ''}\n                <div style=\"margin-top: 1rem;\">\n                    <button class=\"error-action\" onclick=\"this.closest('.error-overlay').remove()\">Close</button>\n                    <button class=\"error-action\" onclick=\"navigator.clipboard.writeText(JSON.stringify(${JSON.stringify(errorInfo)}, null, 2)); window.loadingManager?.showSuccess('Error details copied to clipboard')\">Copy Details</button>\n                </div>\n            </div>\n        `;\n\n        document.body.appendChild(overlay);\n        setTimeout(() => overlay.classList.add('show'), 10);\n\n        // Close on background click\n        overlay.addEventListener('click', (e) => {\n            if (e.target === overlay) {\n                overlay.remove();\n            }\n        });\n    }\n\n    removeNotification(notification) {\n        notification.classList.remove('show');\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n        }, 300);\n    }\n\n    showNetworkStatus(status, type) {\n        const message = `You are ${status}. ${status === 'back online' ? 'Attempting to sync...' : 'Some features may be limited.'}`;\n        this.createNotification('Network Status', message, type, { type: 'network', status });\n    }\n\n    retryLastAction(errorInfo) {\n        // Attempt to retry the last failed action\n        console.log('Retrying action for error:', errorInfo);\n        \n        if (errorInfo.retryCallback && typeof errorInfo.retryCallback === 'function') {\n            errorInfo.retryCallback();\n        } else {\n            // Generic retry - refresh the current section or page\n            window.location.reload();\n        }\n    }\n\n    retryFailedRequests() {\n        // Retry failed network requests when back online\n        if (window.universalAPI && window.universalAPI.processRetryQueue) {\n            window.universalAPI.processRetryQueue();\n        }\n    }\n\n    logError(errorInfo) {\n        // Store errors locally for debugging\n        try {\n            const errors = JSON.parse(localStorage.getItem('app_errors') || '[]');\n            errors.push({\n                ...errorInfo,\n                userAgent: navigator.userAgent,\n                url: window.location.href,\n                timestamp: new Date().toISOString()\n            });\n            \n            // Keep only last 50 errors\n            if (errors.length > 50) {\n                errors.splice(0, errors.length - 50);\n            }\n            \n            localStorage.setItem('app_errors', JSON.stringify(errors));\n        } catch (e) {\n            console.warn('Could not store error log:', e);\n        }\n    }\n\n    reportError(errorInfo) {\n        // Send error to reporting service\n        try {\n            if (window.universalAPI) {\n                window.universalAPI.post('/errors/report', {\n                    ...errorInfo,\n                    userAgent: navigator.userAgent,\n                    url: window.location.href,\n                    timestamp: new Date().toISOString()\n                }).catch(err => {\n                    console.warn('Could not report error:', err);\n                });\n            }\n        } catch (e) {\n            console.warn('Error reporting failed:', e);\n        }\n    }\n\n    // Public API methods\n    showError(message, type = 'error', options = {}) {\n        this.handleError({\n            type,\n            message,\n            ...options\n        });\n    }\n\n    showNetworkError(message = 'Network connection failed') {\n        this.showError(message, 'network');\n    }\n\n    showApiError(message = 'API request failed') {\n        this.showError(message, 'api');\n    }\n\n    showAuthError(message = 'Authentication required') {\n        this.showError(message, 'authentication');\n    }\n\n    showPermissionError(message = 'Access denied') {\n        this.showError(message, 'permission');\n    }\n\n    clearAllErrors() {\n        this.container.innerHTML = '';\n        this.errorQueue = [];\n    }\n\n    getErrorHistory() {\n        try {\n            return JSON.parse(localStorage.getItem('app_errors') || '[]');\n        } catch (e) {\n            return [];\n        }\n    }\n\n    clearErrorHistory() {\n        localStorage.removeItem('app_errors');\n    }\n}\n\n// Initialize global error boundary\nwindow.errorBoundary = new ErrorBoundary();\n\n// Export for modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = ErrorBoundary;\n}"