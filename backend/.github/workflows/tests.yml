name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/tests.yml'

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: portfolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cat > .env.test << EOL
        NODE_ENV=test
        DATABASE_URL=postgres://postgres:postgres@localhost:5432/portfolio_test
        REDIS_URL=redis://localhost:6379/15
        JWT_SECRET=test-jwt-secret-key-for-ci-cd-pipeline
        JWT_REFRESH_SECRET=test-refresh-secret-for-ci-cd
        LOG_LEVEL=error
        DISABLE_EMAIL=true
        DISABLE_EXTERNAL_APIS=true
        FORCE_EXIT=true
        EOL

    - name: Run linting
      run: npm run lint

    - name: Run format check
      run: npm run format:check

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run unit tests
      run: npm run test:unit
      env:
        CI: true

    - name: Run integration tests
      run: npm run test:integration
      env:
        CI: true

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Run performance tests
      run: npm run test:performance
      env:
        CI: true
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    - name: Generate coverage report
      run: npm run test:coverage
      env:
        CI: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          backend/coverage/
          backend/coverage/junit/junit.xml
        retention-days: 7

    - name: Publish test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Backend Tests (${{ matrix.node-version }})
        path: backend/coverage/junit/junit.xml
        reporter: jest-junit

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run security scan
      run: |
        npm audit --audit-level=high
        npx better-npm-audit audit --level=high

    - name: Run SAST scan with CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed!"
          exit 1
        fi

    - name: Check security results
      run: |
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security checks failed!"
          exit 1
        fi

    - name: Quality gate passed
      run: |
        echo "âœ… All quality gates passed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security.result }}"