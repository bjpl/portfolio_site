/**
 * ProjectTag Model
 * Junction table for Project-Tag many-to-many relationship
 */

module.exports = (sequelize, DataTypes) => {
  const ProjectTag = sequelize.define('ProjectTag', {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
    },
    project_id: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'projects',
        key: 'id',
      },
    },
    tag_id: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'tags',
        key: 'id',
      },
    },
    relevance_score: {
      type: DataTypes.INTEGER,
      allowNull: true,
      defaultValue: 1,
      validate: {
        min: 1,
        max: 10,
      },
      comment: 'How relevant this tag is to the project (1-10)',
    },
    added_by: {
      type: DataTypes.UUID,
      allowNull: true,
      references: {
        model: 'users',
        key: 'id',
      },
    },
    added_at: {
      type: DataTypes.DATE,
      defaultValue: DataTypes.NOW,
    },
    source: {
      type: DataTypes.ENUM('manual', 'auto_suggest', 'import', 'ai_generated'),
      defaultValue: 'manual',
    },
    confidence_score: {
      type: DataTypes.DECIMAL(3, 2),
      allowNull: true,
      validate: {
        min: 0,
        max: 1,
      },
      comment: 'AI confidence score for auto-generated tags',
    },
    is_primary: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      comment: 'Whether this is a primary/key tag for the project',
    },
    display_order: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
    },
    metadata: {
      type: DataTypes.JSONB,
      defaultValue: {},
    },
  }, {
    tableName: 'project_tags',
    indexes: [
      { fields: ['project_id'] },
      { fields: ['tag_id'] },
      { fields: ['added_by'] },
      { fields: ['is_primary'] },
      { fields: ['relevance_score'] },
      { fields: ['source'] },
      { fields: ['project_id', 'tag_id'], unique: true },
    ],
  });

  // Instance methods
  ProjectTag.prototype.setPrimary = async function() {
    // Remove primary flag from other tags for this project
    await ProjectTag.update(
      { is_primary: false },
      { where: { project_id: this.project_id } }
    );
    
    // Set this tag as primary
    this.is_primary = true;
    await this.save();
  };

  ProjectTag.prototype.updateRelevance = async function(score) {
    this.relevance_score = Math.max(1, Math.min(10, score));
    await this.save();
  };

  // Class methods
  ProjectTag.getPrimaryTags = function(projectId) {
    return this.findAll({
      where: { 
        project_id: projectId,
        is_primary: true 
      },
      include: [{
        model: sequelize.models.Tag,
        as: 'tag',
      }],
    });
  };

  ProjectTag.getTagsByProject = function(projectId) {
    return this.findAll({
      where: { project_id: projectId },
      order: [['is_primary', 'DESC'], ['relevance_score', 'DESC'], ['display_order', 'ASC']],
      include: [{
        model: sequelize.models.Tag,
        as: 'tag',
      }],
    });
  };

  ProjectTag.getProjectsByTag = function(tagId, limit = null) {
    const options = {
      where: { tag_id: tagId },
      order: [['relevance_score', 'DESC'], ['added_at', 'DESC']],
      include: [{
        model: sequelize.models.Project,
        as: 'project',
      }],
    };
    
    if (limit) {
      options.limit = limit;
    }
    
    return this.findAll(options);
  };

  ProjectTag.getAutoGeneratedTags = function(projectId) {
    return this.findAll({
      where: { 
        project_id: projectId,
        source: 'ai_generated'
      },
      order: [['confidence_score', 'DESC']],
      include: [{
        model: sequelize.models.Tag,
        as: 'tag',
      }],
    });
  };

  ProjectTag.getHighConfidenceTags = function(threshold = 0.8) {
    return this.findAll({
      where: { 
        confidence_score: { [sequelize.Op.gte]: threshold },
        source: 'ai_generated'
      },
      order: [['confidence_score', 'DESC']],
      include: [{
        model: sequelize.models.Tag,
        as: 'tag',
      }, {
        model: sequelize.models.Project,
        as: 'project',
      }],
    });
  };

  // Associations
  ProjectTag.associate = (models) => {
    ProjectTag.belongsTo(models.Project, {
      foreignKey: 'project_id',
      as: 'project',
    });

    ProjectTag.belongsTo(models.Tag, {
      foreignKey: 'tag_id',
      as: 'tag',
    });

    ProjectTag.belongsTo(models.User, {
      foreignKey: 'added_by',
      as: 'tagger',
    });
  };

  return ProjectTag;
};