apiVersion: apps/v1
kind: Deployment
metadata:
  name: portfolio-backend
  namespace: portfolio-backend
  labels:
    app: portfolio-backend
    component: api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: portfolio-backend
      component: api
  template:
    metadata:
      labels:
        app: portfolio-backend
        component: api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3333"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: portfolio-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: portfolio-backend
        image: portfolio-backend:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3333
          protocol: TCP
        env:
        # Environment variables from ConfigMap
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: PORT
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: HOST
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: DB_USER
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: portfolio-backend-config
              key: REDIS_PORT
        
        # Sensitive environment variables from Secret
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: portfolio-backend-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: portfolio-backend-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: portfolio-backend-secrets
              key: JWT_SECRET
        - name: SESSION_SECRET
          valueFrom:
            secretKeyRef:
              name: portfolio-backend-secrets
              key: SESSION_SECRET
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: portfolio-backend-secrets
              key: SENTRY_DSN
        
        # Resource limits and requests
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Volume mounts
        volumeMounts:
        - name: uploads-storage
          mountPath: /app/uploads
        - name: logs-storage
          mountPath: /app/logs
        - name: temp-storage
          mountPath: /app/temp
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: uploads-storage
        persistentVolumeClaim:
          claimName: portfolio-uploads-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: portfolio-logs-pvc
      - name: temp-storage
        emptyDir: {}
      - name: ssl-certs
        secret:
          secretName: portfolio-ssl-certs
          defaultMode: 0644
      
      # Node selection and affinity
      nodeSelector:
        kubernetes.io/os: linux
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - portfolio-backend
              topologyKey: kubernetes.io/hostname
      
      # Tolerations
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300