const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const WebSocket = require('ws');
const http = require('http');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// Import routes
const dashboardRoutes = require('./routes/dashboard');
const bulkRoutes = require('./routes/bulk');
const reviewRoutes = require('./routes/review');

// Middleware
app.use(cors());
app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));

// Static files
app.use('/static', express.static(path.join(__dirname, '../../static')));
app.use('/admin', express.static(path.join(__dirname, '../../static/admin')));
app.use('/tools', express.static(path.join(__dirname, '../../static/tools')));

// API Routes
app.use('/api/dashboard', dashboardRoutes);
app.use('/api/bulk', bulkRoutes);
app.use('/api/review', reviewRoutes);

// WebSocket for real-time updates
wss.on('connection', (ws) => {
  console.log('New WebSocket connection');
  
  ws.on('message', (message) => {
    const data = JSON.parse(message);
    
    switch(data.type) {
      case 'build-status':
        // Broadcast build status to all clients
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
              type: 'build-update',
              data: data.payload
            }));
          }
        });
        break;
      
      case 'content-update':
        // Notify about content changes
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
              type: 'content-changed',
              data: data.payload
            }));
          }
        });
        break;
    }
  });
  
  ws.on('close', () => {
    console.log('WebSocket connection closed');
  });
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'healthy',
    timestamp: new Date(),
    services: {
      dashboard: 'active',
      bulk: 'active',
      review: 'active',
      websocket: 'active'
    }
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    error: 'Something went wrong!',
    message: err.message
  });
});

const PORT = process.env.PORT || 3333;

server.listen(PORT, () => {
  console.log(`Backend server running on http://localhost:${PORT}`);
  console.log(`Admin interface: http://localhost:${PORT}/admin`);
  console.log(`API endpoint: http://localhost:${PORT}/api`);
  console.log(`WebSocket endpoint: ws://localhost:${PORT}`);
});

module.exports = app;
