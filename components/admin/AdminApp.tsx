import React, { useState, useEffect } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { AdminLayout } from './AdminLayout';\nimport { Dashboard } from './Dashboard';\nimport { ContentList } from './ContentList';\nimport { ContentEditor } from './ContentEditor';\nimport { ContentVersioning } from './ContentVersioning';\nimport { MediaLibrary } from './MediaLibrary';\nimport { UserManagement } from './UserManagement';\nimport { AnalyticsDashboard } from './AnalyticsDashboard';\nimport { AdminSettings } from './AdminSettings';\nimport { NotificationSystem } from './NotificationSystem';\nimport { SEOEditor } from './SEOEditor';\nimport { WYSIWYGEditor } from './WYSIWYGEditor';\nimport { MediaPicker } from './MediaPicker';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { UserRole, ContentItem } from '@/types/admin';\nimport { useRouter } from 'next/router';\n\ninterface AdminAppProps {\n  initialPage?: string;\n}\n\ninterface AdminRoute {\n  id: string;\n  path: string;\n  component: React.ComponentType<any>;\n  props?: Record<string, any>;\n  requiredRoles: UserRole[];\n}\n\nexport const AdminApp: React.FC<AdminAppProps> = ({ initialPage = 'dashboard' }) => {\n  const router = useRouter();\n  const { user, isAuthenticated, isLoading } = useAuth0();\n  const [currentPage, setCurrentPage] = useState(initialPage);\n  const [userRole, setUserRole] = useState<UserRole>('viewer');\n  const [selectedContent, setSelectedContent] = useState<ContentItem | null>(null);\n  const [showEditor, setShowEditor] = useState(false);\n\n  // Mock user role determination (replace with your actual logic)\n  useEffect(() => {\n    if (user) {\n      // This would typically come from your user management system\n      // For demo purposes, we'll check user email or metadata\n      const email = user.email?.toLowerCase();\n      if (email?.includes('admin') || user.email === 'admin@example.com') {\n        setUserRole('admin');\n      } else if (email?.includes('editor')) {\n        setUserRole('editor');\n      } else {\n        setUserRole('viewer');\n      }\n    }\n  }, [user]);\n\n  // Parse route from URL\n  useEffect(() => {\n    const path = router.asPath;\n    const segments = path.split('/').filter(Boolean);\n    \n    if (segments.length > 1 && segments[0] === 'admin') {\n      setCurrentPage(segments[1] || 'dashboard');\n    }\n  }, [router.asPath]);\n\n  // Define routes with role-based access control\n  const routes: AdminRoute[] = [\n    {\n      id: 'dashboard',\n      path: '/admin',\n      component: Dashboard,\n      props: { userRole },\n      requiredRoles: ['admin', 'editor', 'viewer']\n    },\n    {\n      id: 'content',\n      path: '/admin/content',\n      component: ContentList,\n      props: { userRole },\n      requiredRoles: ['admin', 'editor']\n    },\n    {\n      id: 'content-new',\n      path: '/admin/content/new',\n      component: ContentEditor,\n      props: { \n        content: null, \n        onSave: (content: ContentItem) => {\n          console.log('Saving new content:', content);\n          setCurrentPage('content');\n        },\n        onCancel: () => setCurrentPage('content'),\n        userRole \n      },\n      requiredRoles: ['admin', 'editor']\n    },\n    {\n      id: 'content-edit',\n      path: '/admin/content/edit',\n      component: ContentEditor,\n      props: { \n        content: selectedContent, \n        onSave: (content: ContentItem) => {\n          console.log('Saving content:', content);\n          setSelectedContent(null);\n          setCurrentPage('content');\n        },\n        onCancel: () => {\n          setSelectedContent(null);\n          setCurrentPage('content');\n        },\n        userRole \n      },\n      requiredRoles: ['admin', 'editor']\n    },\n    {\n      id: 'content-versions',\n      path: '/admin/content/versions',\n      component: ContentVersioning,\n      props: {\n        contentId: selectedContent?.id || '',\n        currentContent: selectedContent,\n        onRestore: (version: any) => {\n          console.log('Restoring version:', version);\n        },\n        userRole\n      },\n      requiredRoles: ['admin', 'editor']\n    },\n    {\n      id: 'media',\n      path: '/admin/media',\n      component: MediaLibrary,\n      props: { userRole },\n      requiredRoles: ['admin', 'editor']\n    },\n    {\n      id: 'users',\n      path: '/admin/users',\n      component: UserManagement,\n      props: { \n        currentUserRole: userRole,\n        currentUserId: user?.sub || ''\n      },\n      requiredRoles: ['admin']\n    },\n    {\n      id: 'analytics',\n      path: '/admin/analytics',\n      component: AnalyticsDashboard,\n      props: { userRole },\n      requiredRoles: ['admin', 'editor']\n    },\n    {\n      id: 'settings',\n      path: '/admin/settings',\n      component: AdminSettings,\n      props: { userRole },\n      requiredRoles: ['admin']\n    }\n  ];\n\n  // Find current route\n  const currentRoute = routes.find(route => route.id === currentPage);\n\n  // Check if user has access to current route\n  const hasAccess = currentRoute?.requiredRoles.includes(userRole) ?? false;\n\n  // Handle navigation\n  const handleNavigation = (pageId: string, contentItem?: ContentItem) => {\n    if (contentItem) {\n      setSelectedContent(contentItem);\n    }\n    setCurrentPage(pageId);\n    \n    // Update URL without causing full page reload\n    const route = routes.find(r => r.id === pageId);\n    if (route) {\n      router.push(route.path, undefined, { shallow: true });\n    }\n  };\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading admin panel...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Not authenticated\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-96\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Admin Access Required</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Please log in to access the admin panel.\n            </p>\n            <Button onClick={() => router.push('/login')}>\n              Go to Login\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // No access to current route\n  if (!hasAccess) {\n    return (\n      <AdminLayout userRole={userRole} currentPage={currentPage}>\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold mb-2\">Access Denied</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                You don't have permission to access this page.\n              </p>\n              <Button onClick={() => handleNavigation('dashboard')}>\n                Go to Dashboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </AdminLayout>\n    );\n  }\n\n  // Render current page component\n  const renderCurrentPage = () => {\n    if (!currentRoute) {\n      return (\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold mb-2\">Page Not Found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                The requested page could not be found.\n              </p>\n              <Button onClick={() => handleNavigation('dashboard')}>\n                Go to Dashboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    const Component = currentRoute.component;\n    return <Component {...currentRoute.props} />;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <AdminLayout \n        userRole={userRole} \n        currentPage={currentPage}\n      >\n        {/* Notification System */}\n        <div className=\"fixed top-4 right-4 z-50\">\n          <NotificationSystem \n            userId={user.sub || ''} \n            userRole={userRole} \n          />\n        </div>\n\n        {/* Main Content */}\n        <div className=\"space-y-6\">\n          {renderCurrentPage()}\n        </div>\n      </AdminLayout>\n    </div>\n  );\n};\n\nexport default AdminApp;