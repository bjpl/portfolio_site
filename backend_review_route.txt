const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

// Get all drafts for review
router.get('/drafts', async (req, res) => {
  const projectRoot = path.join(__dirname, '../../../..');
  const contentPath = path.join(projectRoot, 'content');
  
  try {
    const drafts = [];
    const files = await walkDir(contentPath);
    
    for (const file of files) {
      if (file.endsWith('.md')) {
        const content = await fs.readFile(file, 'utf8');
        if (content.includes('draft: true') || content.includes('draft = true')) {
          const relativePath = path.relative(contentPath, file);
          const stats = await fs.stat(file);
          
          // Extract front matter
          const frontMatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
          let title = path.basename(file, '.md');
          
          if (frontMatterMatch) {
            const titleMatch = frontMatterMatch[1].match(/title:\s*["']?(.+?)["']?\n/);
            if (titleMatch) {
              title = titleMatch[1];
            }
          }
          
          drafts.push({
            path: relativePath,
            title: title,
            modified: stats.mtime,
            size: stats.size
          });
        }
      }
    }
    
    res.json({ drafts });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Run accessibility test
router.post('/accessibility', async (req, res) => {
  const { url } = req.body;
  const projectRoot = path.join(__dirname, '../../../..');
  
  try {
    const { stdout, stderr } = await execPromise(
      `npx pa11y ${url} --reporter json`,
      { cwd: projectRoot }
    );
    
    const results = JSON.parse(stdout);
    res.json({ success: true, results });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Get content for review
router.get('/content/:path', async (req, res) => {
  const projectRoot = path.join(__dirname, '../../../..');
  const contentPath = path.join(projectRoot, 'content', req.params.path);
  
  try {
    const content = await fs.readFile(contentPath, 'utf8');
    const stats = await fs.stat(contentPath);
    
    res.json({
      content,
      path: req.params.path,
      modified: stats.mtime,
      size: stats.size
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update content status
router.post('/publish/:path', async (req, res) => {
  const projectRoot = path.join(__dirname, '../../../..');
  const contentPath = path.join(projectRoot, 'content', req.params.path);
  
  try {
    let content = await fs.readFile(contentPath, 'utf8');
    
    // Update draft status
    content = content.replace(/draft:\s*true/g, 'draft: false');
    content = content.replace(/draft\s*=\s*true/g, 'draft = false');
    
    // Update lastmod date
    const now = new Date().toISOString();
    if (content.includes('lastmod:')) {
      content = content.replace(/lastmod:\s*.+/g, `lastmod: ${now}`);
    } else if (content.includes('lastmod =')) {
      content = content.replace(/lastmod\s*=\s*.+/g, `lastmod = ${now}`);
    }
    
    await fs.writeFile(contentPath, content);
    
    res.json({ success: true, message: 'Content published successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Helper function to walk directory
async function walkDir(dir) {
  let files = [];
  try {
    const items = await fs.readdir(dir, { withFileTypes: true });
    for (const item of items) {
      const fullPath = path.join(dir, item.name);
      if (item.isDirectory()) {
        files = files.concat(await walkDir(fullPath));
      } else {
        files.push(fullPath);
      }
    }
  } catch (error) {
    console.error(`Error walking directory ${dir}:`, error);
  }
  return files;
}

// Get word count and reading time
router.get('/stats/:path', async (req, res) => {
  const projectRoot = path.join(__dirname, '../../../..');
  const contentPath = path.join(projectRoot, 'content', req.params.path);
  
  try {
    const content = await fs.readFile(contentPath, 'utf8');
    
    // Remove front matter
    const mainContent = content.replace(/^---[\s\S]*?---\n/, '');
    
    // Calculate stats
    const wordCount = mainContent.split(/\s+/).filter(word => word.length > 0).length;
    const readingTime = Math.ceil(wordCount / 200); // Assuming 200 words per minute
    
    res.json({
      wordCount,
      readingTime,
      characters: mainContent.length
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
