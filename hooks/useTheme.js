'use client'\n\nimport { useState, useEffect, useCallback } from 'react'\n\nexport const useTheme = () => {\n  const [theme, setTheme] = useState('system')\n  const [resolvedTheme, setResolvedTheme] = useState('light')\n  const [mounted, setMounted] = useState(false)\n\n  // Initialize theme on mount\n  useEffect(() => {\n    setMounted(true)\n    const savedTheme = localStorage.getItem('theme') || 'system'\n    setTheme(savedTheme)\n    applyTheme(savedTheme)\n  }, [])\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n    \n    const handleChange = () => {\n      if (theme === 'system') {\n        applyTheme('system')\n      }\n    }\n\n    mediaQuery.addEventListener('change', handleChange)\n    return () => mediaQuery.removeEventListener('change', handleChange)\n  }, [theme])\n\n  const applyTheme = useCallback((newTheme) => {\n    const root = document.documentElement\n    let actualTheme = newTheme\n\n    if (newTheme === 'system') {\n      actualTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n    }\n\n    // Remove existing theme classes\n    root.classList.remove('light', 'dark')\n    \n    // Add new theme class\n    root.classList.add(actualTheme)\n    \n    // Set data attribute for CSS targeting\n    root.setAttribute('data-theme', actualTheme)\n    \n    // Update resolved theme\n    setResolvedTheme(actualTheme)\n\n    // Update CSS custom properties based on theme\n    updateCSSVariables(actualTheme)\n  }, [])\n\n  const updateCSSVariables = (actualTheme) => {\n    const root = document.documentElement\n    \n    if (actualTheme === 'dark') {\n      // Dark theme variables\n      root.style.setProperty('--color-bg', '#0f172a')\n      root.style.setProperty('--color-surface', '#1e293b')\n      root.style.setProperty('--color-surface-alt', '#334155')\n      root.style.setProperty('--color-text-primary', '#f8fafc')\n      root.style.setProperty('--color-text-secondary', '#cbd5e1')\n      root.style.setProperty('--color-text-muted', '#94a3b8')\n      root.style.setProperty('--color-primary', '#3b82f6')\n      root.style.setProperty('--color-primary-hover', '#2563eb')\n      root.style.setProperty('--color-accent', '#8b5cf6')\n      root.style.setProperty('--color-border', '#475569')\n    } else {\n      // Light theme variables\n      root.style.setProperty('--color-bg', '#ffffff')\n      root.style.setProperty('--color-surface', '#f8fafc')\n      root.style.setProperty('--color-surface-alt', '#f1f5f9')\n      root.style.setProperty('--color-text-primary', '#0f172a')\n      root.style.setProperty('--color-text-secondary', '#475569')\n      root.style.setProperty('--color-text-muted', '#64748b')\n      root.style.setProperty('--color-primary', '#2563eb')\n      root.style.setProperty('--color-primary-hover', '#1d4ed8')\n      root.style.setProperty('--color-accent', '#7c3aed')\n      root.style.setProperty('--color-border', '#e2e8f0')\n    }\n  }\n\n  const toggleTheme = useCallback(() => {\n    const themes = ['light', 'dark', 'system']\n    const currentIndex = themes.indexOf(theme)\n    const nextTheme = themes[(currentIndex + 1) % themes.length]\n    \n    setTheme(nextTheme)\n    localStorage.setItem('theme', nextTheme)\n    applyTheme(nextTheme)\n  }, [theme, applyTheme])\n\n  const setThemeMode = useCallback((newTheme) => {\n    setTheme(newTheme)\n    localStorage.setItem('theme', newTheme)\n    applyTheme(newTheme)\n  }, [applyTheme])\n\n  return {\n    theme,\n    resolvedTheme,\n    mounted,\n    toggleTheme,\n    setTheme: setThemeMode,\n    isDark: resolvedTheme === 'dark',\n    isLight: resolvedTheme === 'light',\n    isSystem: theme === 'system'\n  }\n}\n\nexport default useTheme