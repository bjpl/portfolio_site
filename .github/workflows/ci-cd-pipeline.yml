name: CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
      - 'release/*'
    paths:
      - 'backend/**'
      - '.github/workflows/**'
      - 'package*.json'
  pull_request:
    branches: 
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/**'
      - 'package*.json'
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # Code Quality and Testing
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: portfolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Run linting
        working-directory: ./backend
        run: npm run lint

      - name: Check code formatting
        working-directory: ./backend
        run: npm run format:check

      - name: Run security audit
        working-directory: ./backend
        run: npm audit --audit-level=moderate

      - name: Run unit tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: portfolio_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_for_ci
        run: npm run test:unit

      - name: Run integration tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: portfolio_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_for_ci
        run: npm run test:integration

      - name: Generate test coverage
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: portfolio_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_for_ci
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --prefer-offline --no-audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'portfolio-backend'
          path: './backend'
          format: 'HTML,JSON'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # Build and Push Container Images
  build-and-push:
    runs-on: ubuntu-latest
    name: Build & Push Images
    needs: [quality-checks, security-scan]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/deploy/docker/Dockerfile.production
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Sign container image
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" | cosign sign --key env://COSIGN_PRIVATE_KEY ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://api-staging.portfolio.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Deploy to staging
        working-directory: ./backend/deploy/k8s
        run: |
          # Update image tag in deployment
          sed -i 's|portfolio-backend:latest|${{ needs.build-and-push.outputs.image-tag }}|g' deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f namespace.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f pvc.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f hpa.yaml
          kubectl apply -f ingress.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/portfolio-backend -n portfolio-backend --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Basic health check
          curl -f https://api-staging.portfolio.yourdomain.com/api/health || exit 1
          
          # API endpoint test
          curl -f https://api-staging.portfolio.yourdomain.com/api/health/ready || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.portfolio.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Deploy to production
        working-directory: ./backend/deploy/k8s
        run: |
          # Update image tag in deployment
          sed -i 's|portfolio-backend:latest|${{ needs.build-and-push.outputs.image-tag }}|g' deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f namespace.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f pvc.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f hpa.yaml
          kubectl apply -f ingress.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/portfolio-backend -n portfolio-backend --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Comprehensive health checks
          curl -f https://api.portfolio.yourdomain.com/api/health || exit 1
          curl -f https://api.portfolio.yourdomain.com/api/health/ready || exit 1

      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🚀 Portfolio Backend deployed successfully to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ Portfolio Backend deployment to production failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}