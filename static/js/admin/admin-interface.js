/**\n * Admin Interface System\n * Comprehensive admin panel for content management\n */\n\nclass AdminInterface {\n    constructor() {\n        this.currentView = 'dashboard';\n        this.isInitialized = false;\n        this.init();\n    }\n\n    async init() {\n        if (this.isInitialized) return;\n        \n        // Check if user is admin\n        if (!window.authManager?.isAdmin()) {\n            this.showAccessDenied();\n            return;\n        }\n\n        this.createAdminUI();\n        this.setupEventListeners();\n        this.loadDashboard();\n        \n        this.isInitialized = true;\n        console.log('Admin interface initialized');\n    }\n\n    createAdminUI() {\n        // Create admin container\n        const adminContainer = document.createElement('div');\n        adminContainer.id = 'admin-interface';\n        adminContainer.className = 'admin-interface';\n        adminContainer.innerHTML = this.getAdminHTML();\n        \n        // Add admin styles\n        this.addAdminStyles();\n        \n        // Insert into page\n        const targetContainer = document.getElementById('admin-container') || document.body;\n        targetContainer.appendChild(adminContainer);\n        \n        this.container = adminContainer;\n    }\n\n    getAdminHTML() {\n        return `\n            <div class=\"admin-header\">\n                <h1>Admin Dashboard</h1>\n                <div class=\"admin-user-info\">\n                    <span data-user=\"name\"></span>\n                    <button class=\"admin-logout-btn\" onclick=\"window.authManager.logout()\">Logout</button>\n                </div>\n            </div>\n            \n            <div class=\"admin-nav\">\n                <button class=\"nav-btn active\" data-view=\"dashboard\">Dashboard</button>\n                <button class=\"nav-btn\" data-view=\"blog\">Blog Posts</button>\n                <button class=\"nav-btn\" data-view=\"projects\">Projects</button>\n                <button class=\"nav-btn\" data-view=\"media\">Media</button>\n                <button class=\"nav-btn\" data-view=\"settings\">Settings</button>\n            </div>\n            \n            <div class=\"admin-content\">\n                <div id=\"admin-loading\" class=\"admin-loading\">\n                    <div class=\"spinner\"></div>\n                    <span>Loading...</span>\n                </div>\n                \n                <div id=\"admin-dashboard\" class=\"admin-view\">\n                    <!-- Dashboard content will be loaded here -->\n                </div>\n                \n                <div id=\"admin-blog\" class=\"admin-view hidden\">\n                    <!-- Blog management content -->\n                </div>\n                \n                <div id=\"admin-projects\" class=\"admin-view hidden\">\n                    <!-- Projects management content -->\n                </div>\n                \n                <div id=\"admin-media\" class=\"admin-view hidden\">\n                    <!-- Media management content -->\n                </div>\n                \n                <div id=\"admin-settings\" class=\"admin-view hidden\">\n                    <!-- Settings content -->\n                </div>\n            </div>\n        `;\n    }\n\n    addAdminStyles() {\n        if (document.getElementById('admin-styles')) return;\n        \n        const styles = document.createElement('style');\n        styles.id = 'admin-styles';\n        styles.textContent = `\n            .admin-interface {\n                max-width: 1200px;\n                margin: 0 auto;\n                padding: 20px;\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            }\n            \n            .admin-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                margin-bottom: 2rem;\n                padding-bottom: 1rem;\n                border-bottom: 2px solid #e5e7eb;\n            }\n            \n            .admin-header h1 {\n                margin: 0;\n                color: #1f2937;\n                font-size: 2rem;\n            }\n            \n            .admin-user-info {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n            }\n            \n            .admin-logout-btn {\n                background: #ef4444;\n                color: white;\n                border: none;\n                padding: 8px 16px;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 0.9rem;\n            }\n            \n            .admin-logout-btn:hover {\n                background: #dc2626;\n            }\n            \n            .admin-nav {\n                display: flex;\n                gap: 1rem;\n                margin-bottom: 2rem;\n                border-bottom: 1px solid #e5e7eb;\n            }\n            \n            .nav-btn {\n                background: none;\n                border: none;\n                padding: 12px 24px;\n                cursor: pointer;\n                font-size: 1rem;\n                color: #6b7280;\n                border-bottom: 3px solid transparent;\n                transition: all 0.2s ease;\n            }\n            \n            .nav-btn:hover {\n                color: #374151;\n                background: #f9fafb;\n            }\n            \n            .nav-btn.active {\n                color: #667eea;\n                border-bottom-color: #667eea;\n                font-weight: 600;\n            }\n            \n            .admin-content {\n                min-height: 400px;\n                position: relative;\n            }\n            \n            .admin-view {\n                display: block;\n            }\n            \n            .admin-view.hidden {\n                display: none;\n            }\n            \n            .admin-loading {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n                height: 200px;\n                gap: 1rem;\n            }\n            \n            .admin-loading.hidden {\n                display: none;\n            }\n            \n            .spinner {\n                width: 40px;\n                height: 40px;\n                border: 3px solid #f3f3f3;\n                border-top: 3px solid #667eea;\n                border-radius: 50%;\n                animation: spin 1s linear infinite;\n            }\n            \n            @keyframes spin {\n                0% { transform: rotate(0deg); }\n                100% { transform: rotate(360deg); }\n            }\n            \n            .admin-card {\n                background: white;\n                border-radius: 8px;\n                padding: 1.5rem;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n                margin-bottom: 1.5rem;\n            }\n            \n            .admin-card h3 {\n                margin: 0 0 1rem 0;\n                color: #1f2937;\n            }\n            \n            .stats-grid {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n                gap: 1rem;\n                margin-bottom: 2rem;\n            }\n            \n            .stat-card {\n                background: white;\n                border-radius: 8px;\n                padding: 1.5rem;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n                text-align: center;\n            }\n            \n            .stat-number {\n                font-size: 2rem;\n                font-weight: bold;\n                color: #667eea;\n                margin-bottom: 0.5rem;\n            }\n            \n            .stat-label {\n                color: #6b7280;\n                font-size: 0.9rem;\n            }\n            \n            .admin-button {\n                background: #667eea;\n                color: white;\n                border: none;\n                padding: 10px 20px;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 1rem;\n                transition: background-color 0.2s ease;\n            }\n            \n            .admin-button:hover {\n                background: #5a67d8;\n            }\n            \n            .admin-button.secondary {\n                background: #6b7280;\n            }\n            \n            .admin-button.secondary:hover {\n                background: #4b5563;\n            }\n            \n            .admin-button.danger {\n                background: #ef4444;\n            }\n            \n            .admin-button.danger:hover {\n                background: #dc2626;\n            }\n            \n            .admin-form {\n                background: white;\n                border-radius: 8px;\n                padding: 2rem;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n            }\n            \n            .form-group {\n                margin-bottom: 1.5rem;\n            }\n            \n            .form-label {\n                display: block;\n                margin-bottom: 0.5rem;\n                font-weight: 600;\n                color: #374151;\n            }\n            \n            .form-input {\n                width: 100%;\n                padding: 10px 12px;\n                border: 2px solid #e5e7eb;\n                border-radius: 6px;\n                font-size: 1rem;\n                transition: border-color 0.2s ease;\n            }\n            \n            .form-input:focus {\n                outline: none;\n                border-color: #667eea;\n            }\n            \n            .form-textarea {\n                min-height: 120px;\n                resize: vertical;\n            }\n            \n            .admin-table {\n                width: 100%;\n                border-collapse: collapse;\n                background: white;\n                border-radius: 8px;\n                overflow: hidden;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n            }\n            \n            .admin-table th,\n            .admin-table td {\n                padding: 12px;\n                text-align: left;\n                border-bottom: 1px solid #e5e7eb;\n            }\n            \n            .admin-table th {\n                background: #f9fafb;\n                font-weight: 600;\n                color: #374151;\n            }\n            \n            .admin-table tr:hover {\n                background: #f9fafb;\n            }\n            \n            .action-buttons {\n                display: flex;\n                gap: 0.5rem;\n            }\n            \n            .action-btn {\n                background: none;\n                border: 1px solid #d1d5db;\n                padding: 4px 8px;\n                border-radius: 4px;\n                cursor: pointer;\n                font-size: 0.8rem;\n                transition: all 0.2s ease;\n            }\n            \n            .action-btn:hover {\n                background: #f3f4f6;\n            }\n            \n            .action-btn.edit {\n                color: #667eea;\n                border-color: #667eea;\n            }\n            \n            .action-btn.delete {\n                color: #ef4444;\n                border-color: #ef4444;\n            }\n            \n            .upload-area {\n                border: 2px dashed #d1d5db;\n                border-radius: 8px;\n                padding: 2rem;\n                text-align: center;\n                transition: all 0.2s ease;\n                cursor: pointer;\n            }\n            \n            .upload-area:hover {\n                border-color: #667eea;\n                background: #f8faff;\n            }\n            \n            .upload-area.dragover {\n                border-color: #667eea;\n                background: #e0e7ff;\n            }\n            \n            [data-theme=\"dark\"] .admin-interface {\n                color: #f9fafb;\n            }\n            \n            [data-theme=\"dark\"] .admin-header h1 {\n                color: #f9fafb;\n            }\n            \n            [data-theme=\"dark\"] .admin-card,\n            [data-theme=\"dark\"] .stat-card,\n            [data-theme=\"dark\"] .admin-form,\n            [data-theme=\"dark\"] .admin-table {\n                background: #1f2937;\n                color: #f9fafb;\n            }\n            \n            [data-theme=\"dark\"] .admin-table th {\n                background: #374151;\n            }\n            \n            [data-theme=\"dark\"] .form-input {\n                background: #374151;\n                color: #f9fafb;\n                border-color: #4b5563;\n            }\n        `;\n        \n        document.head.appendChild(styles);\n    }\n\n    setupEventListeners() {\n        // Navigation\n        const navButtons = this.container.querySelectorAll('.nav-btn');\n        navButtons.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const view = e.target.dataset.view;\n                this.switchView(view);\n            });\n        });\n\n        // Auth state changes\n        window.authManager?.addAuthListener((event, data) => {\n            if (event === 'logout') {\n                this.cleanup();\n                window.location.href = '/';\n            }\n        });\n    }\n\n    switchView(viewName) {\n        this.currentView = viewName;\n        \n        // Update navigation\n        const navButtons = this.container.querySelectorAll('.nav-btn');\n        navButtons.forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.view === viewName);\n        });\n\n        // Hide all views\n        const views = this.container.querySelectorAll('.admin-view');\n        views.forEach(view => view.classList.add('hidden'));\n\n        // Show selected view\n        const targetView = this.container.querySelector(`#admin-${viewName}`);\n        if (targetView) {\n            targetView.classList.remove('hidden');\n            this.loadViewContent(viewName);\n        }\n    }\n\n    async loadViewContent(viewName) {\n        const viewContainer = this.container.querySelector(`#admin-${viewName}`);\n        \n        try {\n            switch (viewName) {\n                case 'dashboard':\n                    await this.loadDashboard();\n                    break;\n                case 'blog':\n                    await this.loadBlogManagement();\n                    break;\n                case 'projects':\n                    await this.loadProjectsManagement();\n                    break;\n                case 'media':\n                    await this.loadMediaManagement();\n                    break;\n                case 'settings':\n                    await this.loadSettings();\n                    break;\n            }\n        } catch (error) {\n            this.showError(`Failed to load ${viewName} view: ${error.message}`);\n        }\n    }\n\n    async loadDashboard() {\n        const dashboardContainer = this.container.querySelector('#admin-dashboard');\n        \n        try {\n            // Get statistics\n            const [blogData, projectsData] = await Promise.all([\n                window.dataService.getBlogPosts({ limit: 1 }),\n                window.dataService.getProjects()\n            ]);\n\n            const stats = {\n                blogPosts: blogData.pagination?.total || 0,\n                projects: projectsData.projects?.length || 0,\n                published: blogData.posts?.filter(p => p.status === 'published').length || 0,\n                featured: projectsData.projects?.filter(p => p.featured).length || 0\n            };\n\n            dashboardContainer.innerHTML = `\n                <div class=\"stats-grid\">\n                    <div class=\"stat-card\">\n                        <div class=\"stat-number\">${stats.blogPosts}</div>\n                        <div class=\"stat-label\">Blog Posts</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-number\">${stats.projects}</div>\n                        <div class=\"stat-label\">Projects</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-number\">${stats.published}</div>\n                        <div class=\"stat-label\">Published</div>\n                    </div>\n                    <div class=\"stat-card\">\n                        <div class=\"stat-number\">${stats.featured}</div>\n                        <div class=\"stat-label\">Featured</div>\n                    </div>\n                </div>\n                \n                <div class=\"admin-card\">\n                    <h3>Quick Actions</h3>\n                    <div style=\"display: flex; gap: 1rem; flex-wrap: wrap;\">\n                        <button class=\"admin-button\" onclick=\"adminInterface.switchView('blog'); adminInterface.showCreateBlogForm()\">\n                            New Blog Post\n                        </button>\n                        <button class=\"admin-button\" onclick=\"adminInterface.switchView('projects'); adminInterface.showCreateProjectForm()\">\n                            New Project\n                        </button>\n                        <button class=\"admin-button secondary\" onclick=\"adminInterface.switchView('media')\">\n                            Upload Media\n                        </button>\n                        <button class=\"admin-button secondary\" onclick=\"window.dataService.invalidateCache()\">\n                            Clear Cache\n                        </button>\n                    </div>\n                </div>\n                \n                <div class=\"admin-card\">\n                    <h3>Recent Activity</h3>\n                    <p>Recent blog posts and project updates will appear here.</p>\n                </div>\n            `;\n            \n        } catch (error) {\n            dashboardContainer.innerHTML = `\n                <div class=\"admin-card\">\n                    <h3>Dashboard Error</h3>\n                    <p>Unable to load dashboard data: ${error.message}</p>\n                    <button class=\"admin-button\" onclick=\"adminInterface.loadDashboard()\">\n                        Retry\n                    </button>\n                </div>\n            `;\n        }\n    }\n\n    async loadBlogManagement() {\n        const blogContainer = this.container.querySelector('#admin-blog');\n        \n        try {\n            const blogData = await window.dataService.getBlogPosts({ limit: 50 });\n            \n            blogContainer.innerHTML = `\n                <div class=\"admin-card\">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;\">\n                        <h3>Blog Posts</h3>\n                        <button class=\"admin-button\" onclick=\"adminInterface.showCreateBlogForm()\">\n                            New Post\n                        </button>\n                    </div>\n                    \n                    <table class=\"admin-table\">\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Status</th>\n                                <th>Published</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${blogData.posts.map(post => `\n                                <tr>\n                                    <td>${post.title}</td>\n                                    <td>\n                                        <span class=\"status-badge status-${post.status}\">\n                                            ${post.status}\n                                        </span>\n                                    </td>\n                                    <td>${new Date(post.publishedAt).toLocaleDateString()}</td>\n                                    <td>\n                                        <div class=\"action-buttons\">\n                                            <button class=\"action-btn edit\" onclick=\"adminInterface.editBlogPost(${post.id})\">\n                                                Edit\n                                            </button>\n                                            <button class=\"action-btn delete\" onclick=\"adminInterface.deleteBlogPost(${post.id})\">\n                                                Delete\n                                            </button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            `).join('')}\n                        </tbody>\n                    </table>\n                </div>\n                \n                <div id=\"blog-form-container\" style=\"display: none;\">\n                    <!-- Blog form will be inserted here -->\n                </div>\n            `;\n            \n        } catch (error) {\n            blogContainer.innerHTML = `\n                <div class=\"admin-card\">\n                    <h3>Blog Management Error</h3>\n                    <p>Unable to load blog posts: ${error.message}</p>\n                    <button class=\"admin-button\" onclick=\"adminInterface.loadBlogManagement()\">\n                        Retry\n                    </button>\n                </div>\n            `;\n        }\n    }\n\n    async loadProjectsManagement() {\n        const projectsContainer = this.container.querySelector('#admin-projects');\n        \n        try {\n            const projectsData = await window.dataService.getProjects();\n            \n            projectsContainer.innerHTML = `\n                <div class=\"admin-card\">\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;\">\n                        <h3>Projects</h3>\n                        <button class=\"admin-button\" onclick=\"adminInterface.showCreateProjectForm()\">\n                            New Project\n                        </button>\n                    </div>\n                    \n                    <table class=\"admin-table\">\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>Category</th>\n                                <th>Status</th>\n                                <th>Featured</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${projectsData.projects.map(project => `\n                                <tr>\n                                    <td>${project.name}</td>\n                                    <td>${project.category}</td>\n                                    <td>${project.status}</td>\n                                    <td>${project.featured ? '⭐' : ''}</td>\n                                    <td>\n                                        <div class=\"action-buttons\">\n                                            <button class=\"action-btn edit\" onclick=\"adminInterface.editProject(${project.id})\">\n                                                Edit\n                                            </button>\n                                            <button class=\"action-btn delete\" onclick=\"adminInterface.deleteProject(${project.id})\">\n                                                Delete\n                                            </button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            `).join('')}\n                        </tbody>\n                    </table>\n                </div>\n                \n                <div id=\"project-form-container\" style=\"display: none;\">\n                    <!-- Project form will be inserted here -->\n                </div>\n            `;\n            \n        } catch (error) {\n            projectsContainer.innerHTML = `\n                <div class=\"admin-card\">\n                    <h3>Projects Management Error</h3>\n                    <p>Unable to load projects: ${error.message}</p>\n                    <button class=\"admin-button\" onclick=\"adminInterface.loadProjectsManagement()\">\n                        Retry\n                    </button>\n                </div>\n            `;\n        }\n    }\n\n    async loadMediaManagement() {\n        const mediaContainer = this.container.querySelector('#admin-media');\n        \n        mediaContainer.innerHTML = `\n            <div class=\"admin-card\">\n                <h3>Media Upload</h3>\n                <div class=\"upload-area\" onclick=\"document.getElementById('file-input').click()\">\n                    <div style=\"margin-bottom: 1rem; font-size: 3rem;\">📁</div>\n                    <div>Click to select files or drag and drop</div>\n                    <div style=\"margin-top: 0.5rem; color: #6b7280; font-size: 0.9rem;\">\n                        Supported: Images (JPG, PNG, GIF), Videos (MP4), Documents (PDF)\n                    </div>\n                </div>\n                <input type=\"file\" id=\"file-input\" multiple accept=\"image/*,video/*,.pdf\" style=\"display: none;\">\n                \n                <div id=\"upload-progress\" style=\"display: none; margin-top: 1rem;\">\n                    <!-- Upload progress will be shown here -->\n                </div>\n            </div>\n            \n            <div class=\"admin-card\">\n                <h3>Recent Uploads</h3>\n                <div id=\"recent-uploads\">\n                    <p>Recent uploads will appear here.</p>\n                </div>\n            </div>\n        `;\n        \n        // Setup file upload\n        this.setupFileUpload();\n    }\n\n    async loadSettings() {\n        const settingsContainer = this.container.querySelector('#admin-settings');\n        \n        settingsContainer.innerHTML = `\n            <div class=\"admin-card\">\n                <h3>General Settings</h3>\n                <form class=\"admin-form\" onsubmit=\"adminInterface.saveSettings(event)\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Site Title</label>\n                        <input type=\"text\" class=\"form-input\" name=\"siteTitle\" value=\"Portfolio Site\">\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Site Description</label>\n                        <textarea class=\"form-input form-textarea\" name=\"siteDescription\">\n                            Professional portfolio and blog\n                        </textarea>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Contact Email</label>\n                        <input type=\"email\" class=\"form-input\" name=\"contactEmail\" value=\"contact@example.com\">\n                    </div>\n                    \n                    <button type=\"submit\" class=\"admin-button\">Save Settings</button>\n                </form>\n            </div>\n            \n            <div class=\"admin-card\">\n                <h3>Cache Management</h3>\n                <p>Manage application cache and performance.</p>\n                <div style=\"display: flex; gap: 1rem; margin-top: 1rem;\">\n                    <button class=\"admin-button secondary\" onclick=\"window.dataService.invalidateCache()\">\n                        Clear All Cache\n                    </button>\n                    <button class=\"admin-button secondary\" onclick=\"window.location.reload()\">\n                        Force Refresh\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"admin-card\">\n                <h3>System Information</h3>\n                <div id=\"system-info\">\n                    <p><strong>User Agent:</strong> ${navigator.userAgent}</p>\n                    <p><strong>Online Status:</strong> ${navigator.onLine ? 'Online' : 'Offline'}</p>\n                    <p><strong>Current User:</strong> ${window.authManager.getDisplayName()}</p>\n                </div>\n            </div>\n        `;\n    }\n\n    setupFileUpload() {\n        const uploadArea = this.container.querySelector('.upload-area');\n        const fileInput = this.container.querySelector('#file-input');\n        \n        if (!uploadArea || !fileInput) return;\n\n        // Drag and drop\n        uploadArea.addEventListener('dragover', (e) => {\n            e.preventDefault();\n            uploadArea.classList.add('dragover');\n        });\n        \n        uploadArea.addEventListener('dragleave', () => {\n            uploadArea.classList.remove('dragover');\n        });\n        \n        uploadArea.addEventListener('drop', (e) => {\n            e.preventDefault();\n            uploadArea.classList.remove('dragover');\n            const files = Array.from(e.dataTransfer.files);\n            this.handleFileUpload(files);\n        });\n        \n        // File input change\n        fileInput.addEventListener('change', (e) => {\n            const files = Array.from(e.target.files);\n            this.handleFileUpload(files);\n        });\n    }\n\n    async handleFileUpload(files) {\n        const progressContainer = this.container.querySelector('#upload-progress');\n        progressContainer.style.display = 'block';\n        \n        for (const file of files) {\n            try {\n                progressContainer.innerHTML += `\n                    <div class=\"upload-item\" data-filename=\"${file.name}\">\n                        <div>${file.name}</div>\n                        <div class=\"progress-bar\">\n                            <div class=\"progress-fill\" style=\"width: 0%\"></div>\n                        </div>\n                    </div>\n                `;\n                \n                await window.dataService.uploadFile(file, 'media', (progress) => {\n                    const progressFill = progressContainer.querySelector(`[data-filename=\"${file.name}\"] .progress-fill`);\n                    if (progressFill) {\n                        progressFill.style.width = `${progress}%`;\n                    }\n                });\n                \n                window.loadingManager.showSuccess(`${file.name} uploaded successfully`);\n                \n            } catch (error) {\n                window.errorBoundary.showError(`Upload failed for ${file.name}: ${error.message}`);\n            }\n        }\n    }\n\n    showCreateBlogForm() {\n        const formContainer = this.container.querySelector('#blog-form-container');\n        formContainer.style.display = 'block';\n        formContainer.innerHTML = this.getBlogFormHTML();\n    }\n\n    showCreateProjectForm() {\n        const formContainer = this.container.querySelector('#project-form-container');\n        formContainer.style.display = 'block';\n        formContainer.innerHTML = this.getProjectFormHTML();\n    }\n\n    getBlogFormHTML(post = null) {\n        const isEdit = !!post;\n        return `\n            <div class=\"admin-form\">\n                <h3>${isEdit ? 'Edit' : 'Create'} Blog Post</h3>\n                <form onsubmit=\"adminInterface.saveBlogPost(event, ${post?.id || 'null'})\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Title</label>\n                        <input type=\"text\" class=\"form-input\" name=\"title\" value=\"${post?.title || ''}\" required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Slug</label>\n                        <input type=\"text\" class=\"form-input\" name=\"slug\" value=\"${post?.slug || ''}\" required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Excerpt</label>\n                        <textarea class=\"form-input form-textarea\" name=\"excerpt\" required>${post?.excerpt || ''}</textarea>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Content</label>\n                        <textarea class=\"form-input\" name=\"content\" style=\"min-height: 300px;\" required>${post?.content || ''}</textarea>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Category</label>\n                        <input type=\"text\" class=\"form-input\" name=\"category\" value=\"${post?.category || ''}\" required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Tags (comma-separated)</label>\n                        <input type=\"text\" class=\"form-input\" name=\"tags\" value=\"${post?.tags?.join(', ') || ''}\">\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Status</label>\n                        <select class=\"form-input\" name=\"status\">\n                            <option value=\"draft\" ${post?.status === 'draft' ? 'selected' : ''}>Draft</option>\n                            <option value=\"published\" ${post?.status === 'published' ? 'selected' : ''}>Published</option>\n                        </select>\n                    </div>\n                    \n                    <div style=\"display: flex; gap: 1rem; margin-top: 2rem;\">\n                        <button type=\"submit\" class=\"admin-button\">\n                            ${isEdit ? 'Update' : 'Create'} Post\n                        </button>\n                        <button type=\"button\" class=\"admin-button secondary\" onclick=\"adminInterface.hideForms()\">\n                            Cancel\n                        </button>\n                    </div>\n                </form>\n            </div>\n        `;\n    }\n\n    getProjectFormHTML(project = null) {\n        const isEdit = !!project;\n        return `\n            <div class=\"admin-form\">\n                <h3>${isEdit ? 'Edit' : 'Create'} Project</h3>\n                <form onsubmit=\"adminInterface.saveProject(event, ${project?.id || 'null'})\">\n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Name</label>\n                        <input type=\"text\" class=\"form-input\" name=\"name\" value=\"${project?.name || ''}\" required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Slug</label>\n                        <input type=\"text\" class=\"form-input\" name=\"slug\" value=\"${project?.slug || ''}\" required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Description</label>\n                        <textarea class=\"form-input form-textarea\" name=\"description\" required>${project?.description || ''}</textarea>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Long Description</label>\n                        <textarea class=\"form-input\" name=\"longDescription\" style=\"min-height: 200px;\">${project?.longDescription || ''}</textarea>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Category</label>\n                        <input type=\"text\" class=\"form-input\" name=\"category\" value=\"${project?.category || ''}\" required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Technologies (comma-separated)</label>\n                        <input type=\"text\" class=\"form-input\" name=\"technologies\" value=\"${project?.technologies?.join(', ') || ''}\">\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label class=\"form-label\">Status</label>\n                        <select class=\"form-input\" name=\"status\">\n                            <option value=\"planning\" ${project?.status === 'planning' ? 'selected' : ''}>Planning</option>\n                            <option value=\"in-progress\" ${project?.status === 'in-progress' ? 'selected' : ''}>In Progress</option>\n                            <option value=\"completed\" ${project?.status === 'completed' ? 'selected' : ''}>Completed</option>\n                        </select>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label style=\"display: flex; align-items: center; gap: 0.5rem;\">\n                            <input type=\"checkbox\" name=\"featured\" ${project?.featured ? 'checked' : ''}>\n                            Featured Project\n                        </label>\n                    </div>\n                    \n                    <div style=\"display: flex; gap: 1rem; margin-top: 2rem;\">\n                        <button type=\"submit\" class=\"admin-button\">\n                            ${isEdit ? 'Update' : 'Create'} Project\n                        </button>\n                        <button type=\"button\" class=\"admin-button secondary\" onclick=\"adminInterface.hideForms()\">\n                            Cancel\n                        </button>\n                    </div>\n                </form>\n            </div>\n        `;\n    }\n\n    async saveBlogPost(event, postId = null) {\n        event.preventDefault();\n        \n        const formData = new FormData(event.target);\n        const postData = {\n            title: formData.get('title'),\n            slug: formData.get('slug'),\n            excerpt: formData.get('excerpt'),\n            content: formData.get('content'),\n            category: formData.get('category'),\n            tags: formData.get('tags').split(',').map(tag => tag.trim()),\n            status: formData.get('status')\n        };\n        \n        try {\n            if (postId) {\n                await window.dataService.updateBlogPost(postId, postData);\n                window.loadingManager.showSuccess('Blog post updated successfully');\n            } else {\n                await window.dataService.createBlogPost(postData);\n                window.loadingManager.showSuccess('Blog post created successfully');\n            }\n            \n            this.hideForms();\n            this.loadBlogManagement();\n            \n        } catch (error) {\n            window.errorBoundary.showError(`Failed to save blog post: ${error.message}`);\n        }\n    }\n\n    async saveProject(event, projectId = null) {\n        event.preventDefault();\n        \n        const formData = new FormData(event.target);\n        const projectData = {\n            name: formData.get('name'),\n            slug: formData.get('slug'),\n            description: formData.get('description'),\n            longDescription: formData.get('longDescription'),\n            category: formData.get('category'),\n            technologies: formData.get('technologies').split(',').map(tech => tech.trim()),\n            status: formData.get('status'),\n            featured: formData.get('featured') === 'on'\n        };\n        \n        try {\n            if (projectId) {\n                await window.dataService.updateProject(projectId, projectData);\n                window.loadingManager.showSuccess('Project updated successfully');\n            } else {\n                await window.dataService.createProject(projectData);\n                window.loadingManager.showSuccess('Project created successfully');\n            }\n            \n            this.hideForms();\n            this.loadProjectsManagement();\n            \n        } catch (error) {\n            window.errorBoundary.showError(`Failed to save project: ${error.message}`);\n        }\n    }\n\n    async saveSettings(event) {\n        event.preventDefault();\n        // Settings save logic would go here\n        window.loadingManager.showSuccess('Settings saved successfully');\n    }\n\n    hideForms() {\n        const blogForm = this.container.querySelector('#blog-form-container');\n        const projectForm = this.container.querySelector('#project-form-container');\n        \n        if (blogForm) blogForm.style.display = 'none';\n        if (projectForm) projectForm.style.display = 'none';\n    }\n\n    showAccessDenied() {\n        document.body.innerHTML = `\n            <div style=\"display: flex; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; text-align: center;\">\n                <h1>Access Denied</h1>\n                <p>You don't have permission to access the admin interface.</p>\n                <button onclick=\"window.location.href = '/'\" style=\"padding: 10px 20px; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer;\">\n                    Go Home\n                </button>\n            </div>\n        `;\n    }\n\n    showError(message) {\n        window.errorBoundary?.showError(message, 'admin');\n    }\n\n    cleanup() {\n        if (this.container && this.container.parentNode) {\n            this.container.parentNode.removeChild(this.container);\n        }\n        this.isInitialized = false;\n    }\n}\n\n// Initialize admin interface\nwindow.adminInterface = new AdminInterface();\n\n// Export for modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = AdminInterface;\n}"