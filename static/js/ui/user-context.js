/**\n * User Context Manager\n * Manages user state and provides context throughout the application\n */\n\nclass UserContext {\n    constructor() {\n        this.user = null;\n        this.isAuthenticated = false;\n        this.preferences = {};\n        this.session = null;\n        this.subscribers = new Map();\n        \n        this.init();\n    }\n\n    init() {\n        this.loadStoredData();\n        this.setupEventListeners();\n        this.updateUI();\n    }\n\n    loadStoredData() {\n        // Load user preferences\n        try {\n            const storedPrefs = localStorage.getItem('user_preferences');\n            if (storedPrefs) {\n                this.preferences = JSON.parse(storedPrefs);\n            }\n        } catch (error) {\n            console.warn('Could not load user preferences:', error);\n        }\n\n        // Load session data\n        try {\n            const sessionData = sessionStorage.getItem('user_session');\n            if (sessionData) {\n                this.session = JSON.parse(sessionData);\n            }\n        } catch (error) {\n            console.warn('Could not load session data:', error);\n        }\n    }\n\n    setupEventListeners() {\n        // Listen for auth events\n        window.addEventListener('auth:login', (event) => {\n            this.setUser(event.detail);\n        });\n\n        window.addEventListener('auth:logout', () => {\n            this.clearUser();\n        });\n\n        window.addEventListener('auth:profileUpdate', (event) => {\n            this.updateUser(event.detail);\n        });\n\n        // Listen for preference changes\n        window.addEventListener('storage', (event) => {\n            if (event.key === 'user_preferences') {\n                try {\n                    this.preferences = JSON.parse(event.newValue || '{}');\n                    this.notifySubscribers('preferences', this.preferences);\n                } catch (error) {\n                    console.warn('Could not sync preferences:', error);\n                }\n            }\n        });\n    }\n\n    // User management\n    setUser(userData) {\n        this.user = userData;\n        this.isAuthenticated = true;\n        \n        // Merge user preferences if available\n        if (userData.preferences) {\n            this.preferences = { ...this.preferences, ...userData.preferences };\n            this.savePreferences();\n        }\n\n        this.saveSession();\n        this.updateUI();\n        this.notifySubscribers('user', this.user);\n        this.notifySubscribers('auth', true);\n    }\n\n    updateUser(userData) {\n        if (this.user) {\n            this.user = { ...this.user, ...userData };\n            this.saveSession();\n            this.updateUI();\n            this.notifySubscribers('user', this.user);\n        }\n    }\n\n    clearUser() {\n        this.user = null;\n        this.isAuthenticated = false;\n        this.session = null;\n        \n        sessionStorage.removeItem('user_session');\n        this.updateUI();\n        this.notifySubscribers('user', null);\n        this.notifySubscribers('auth', false);\n    }\n\n    // Preferences management\n    setPreference(key, value) {\n        this.preferences[key] = value;\n        this.savePreferences();\n        this.notifySubscribers('preferences', this.preferences);\n        \n        // Apply preference immediately if it's a UI setting\n        this.applyPreference(key, value);\n    }\n\n    getPreference(key, defaultValue = null) {\n        return this.preferences.hasOwnProperty(key) ? this.preferences[key] : defaultValue;\n    }\n\n    removePreference(key) {\n        delete this.preferences[key];\n        this.savePreferences();\n        this.notifySubscribers('preferences', this.preferences);\n    }\n\n    applyPreference(key, value) {\n        switch (key) {\n            case 'theme':\n                document.documentElement.setAttribute('data-theme', value);\n                break;\n            case 'language':\n                document.documentElement.setAttribute('lang', value);\n                // Trigger language change event\n                window.dispatchEvent(new CustomEvent('languageChange', { detail: value }));\n                break;\n            case 'fontSize':\n                document.documentElement.style.setProperty('--base-font-size', value);\n                break;\n            case 'reducedMotion':\n                document.documentElement.classList.toggle('reduce-motion', value);\n                break;\n        }\n    }\n\n    savePreferences() {\n        try {\n            localStorage.setItem('user_preferences', JSON.stringify(this.preferences));\n        } catch (error) {\n            console.warn('Could not save preferences:', error);\n        }\n    }\n\n    saveSession() {\n        try {\n            const sessionData = {\n                user: this.user,\n                timestamp: Date.now(),\n                preferences: this.preferences\n            };\n            sessionStorage.setItem('user_session', JSON.stringify(sessionData));\n        } catch (error) {\n            console.warn('Could not save session:', error);\n        }\n    }\n\n    // UI updates\n    updateUI() {\n        this.updateAuthUI();\n        this.updateProfileUI();\n        this.updateNavigationUI();\n        this.applyAllPreferences();\n    }\n\n    updateAuthUI() {\n        // Update auth-related UI elements\n        const loginButtons = document.querySelectorAll('[data-auth=\"login\"]');\n        const logoutButtons = document.querySelectorAll('[data-auth=\"logout\"]');\n        const authRequired = document.querySelectorAll('[data-auth=\"required\"]');\n        const adminRequired = document.querySelectorAll('[data-auth=\"admin\"]');\n\n        loginButtons.forEach(button => {\n            button.style.display = this.isAuthenticated ? 'none' : 'block';\n        });\n\n        logoutButtons.forEach(button => {\n            button.style.display = this.isAuthenticated ? 'block' : 'none';\n        });\n\n        authRequired.forEach(element => {\n            element.style.display = this.isAuthenticated ? 'block' : 'none';\n        });\n\n        adminRequired.forEach(element => {\n            const isAdmin = this.user?.role === 'admin';\n            element.style.display = isAdmin ? 'block' : 'none';\n        });\n    }\n\n    updateProfileUI() {\n        if (!this.user) return;\n\n        // Update user name displays\n        const nameElements = document.querySelectorAll('[data-user=\"name\"]');\n        nameElements.forEach(element => {\n            element.textContent = this.getDisplayName();\n        });\n\n        // Update user email displays\n        const emailElements = document.querySelectorAll('[data-user=\"email\"]');\n        emailElements.forEach(element => {\n            element.textContent = this.user.email || '';\n        });\n\n        // Update avatar displays\n        const avatarElements = document.querySelectorAll('[data-user=\"avatar\"]');\n        avatarElements.forEach(element => {\n            if (this.user.avatar) {\n                element.src = this.user.avatar;\n            } else {\n                // Use initials as fallback\n                element.src = this.generateAvatarUrl(this.getDisplayName());\n            }\n        });\n\n        // Update role displays\n        const roleElements = document.querySelectorAll('[data-user=\"role\"]');\n        roleElements.forEach(element => {\n            element.textContent = this.user.role || 'User';\n        });\n    }\n\n    updateNavigationUI() {\n        // Update navigation based on user permissions\n        const navItems = document.querySelectorAll('[data-nav-permission]');\n        navItems.forEach(item => {\n            const requiredPermission = item.dataset.navPermission;\n            const hasPermission = this.hasPermission(requiredPermission);\n            item.style.display = hasPermission ? 'block' : 'none';\n        });\n    }\n\n    applyAllPreferences() {\n        Object.entries(this.preferences).forEach(([key, value]) => {\n            this.applyPreference(key, value);\n        });\n    }\n\n    // Utility methods\n    getDisplayName() {\n        if (!this.user) return 'Guest';\n        \n        return this.user.displayName || \n               (this.user.firstName && this.user.lastName ? \n                `${this.user.firstName} ${this.user.lastName}` : \n                this.user.username || \n                this.user.email || \n                'User');\n    }\n\n    generateAvatarUrl(name, size = 40) {\n        const initials = name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase();\n        const colors = ['667eea', '764ba2', 'f093fb', '4facfe', '43e97b', 'fa709a'];\n        const color = colors[name.length % colors.length];\n        \n        return `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&size=${size}&background=${color}&color=fff&rounded=true`;\n    }\n\n    hasPermission(permission) {\n        if (!this.isAuthenticated || !this.user) return false;\n        \n        // Admin has all permissions\n        if (this.user.role === 'admin') return true;\n        \n        // Check specific permissions\n        return this.user.permissions && this.user.permissions.includes(permission);\n    }\n\n    hasRole(role) {\n        return this.isAuthenticated && this.user && this.user.role === role;\n    }\n\n    isAdmin() {\n        return this.hasRole('admin');\n    }\n\n    // Subscription system\n    subscribe(event, callback) {\n        if (!this.subscribers.has(event)) {\n            this.subscribers.set(event, new Set());\n        }\n        this.subscribers.get(event).add(callback);\n        \n        // Immediately call with current data for certain events\n        if (event === 'user' && this.user) {\n            callback(this.user);\n        } else if (event === 'auth') {\n            callback(this.isAuthenticated);\n        } else if (event === 'preferences') {\n            callback(this.preferences);\n        }\n    }\n\n    unsubscribe(event, callback) {\n        if (this.subscribers.has(event)) {\n            this.subscribers.get(event).delete(callback);\n        }\n    }\n\n    notifySubscribers(event, data) {\n        if (this.subscribers.has(event)) {\n            this.subscribers.get(event).forEach(callback => {\n                try {\n                    callback(data);\n                } catch (error) {\n                    console.error('Subscriber callback error:', error);\n                }\n            });\n        }\n    }\n\n    // Session management\n    isSessionExpired() {\n        if (!this.session || !this.session.timestamp) return true;\n        \n        const sessionAge = Date.now() - this.session.timestamp;\n        const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n        \n        return sessionAge > maxAge;\n    }\n\n    refreshSession() {\n        if (this.isAuthenticated) {\n            this.saveSession();\n        }\n    }\n\n    // Export/Import user data\n    exportUserData() {\n        return {\n            user: this.user,\n            preferences: this.preferences,\n            session: this.session,\n            exported: new Date().toISOString()\n        };\n    }\n\n    importUserData(data) {\n        if (data.user) {\n            this.setUser(data.user);\n        }\n        \n        if (data.preferences) {\n            this.preferences = { ...this.preferences, ...data.preferences };\n            this.savePreferences();\n        }\n        \n        this.updateUI();\n    }\n\n    // Cleanup\n    cleanup() {\n        this.subscribers.clear();\n        sessionStorage.removeItem('user_session');\n    }\n}\n\n// Initialize global user context\nwindow.userContext = new UserContext();\n\n// Export for modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = UserContext;\n}"