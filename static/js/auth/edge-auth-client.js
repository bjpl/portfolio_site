/**
 * Edge Authentication Client-Side Utilities\n * Works with Netlify Edge Functions for JWT authentication\n */\n\nclass EdgeAuthClient {\n  constructor() {\n    this.baseUrl = window.location.origin;\n    this.tokenKey = 'auth-token';\n    this.userKey = 'auth-user';\n  }\n\n  /**\n   * Login with username and password\n   */\n  async login(username, password) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ username, password })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed');\n      }\n\n      // Store token and user info\n      localStorage.setItem(this.tokenKey, data.token);\n      localStorage.setItem(this.userKey, JSON.stringify(data.user));\n      \n      // Set cookie for server-side access\n      this.setCookie('auth-token', data.token, data.expiresIn);\n\n      return {\n        success: true,\n        token: data.token,\n        user: data.user,\n        expiresIn: data.expiresIn\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Logout user\n   */\n  async logout() {\n    try {\n      const token = this.getToken();\n      \n      if (token) {\n        // Call logout endpoint\n        await fetch(`${this.baseUrl}/api/auth/logout`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage and cookies regardless of API call success\n      localStorage.removeItem(this.tokenKey);\n      localStorage.removeItem(this.userKey);\n      this.deleteCookie('auth-token');\n    }\n  }\n\n  /**\n   * Verify current token\n   */\n  async verifyToken(token = null) {\n    try {\n      const authToken = token || this.getToken();\n      \n      if (!authToken) {\n        return { valid: false, error: 'No token found' };\n      }\n\n      const response = await fetch(`${this.baseUrl}/api/auth/verify`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Token is invalid, clean up\n        this.logout();\n        return { valid: false, error: data.error };\n      }\n\n      return {\n        valid: true,\n        user: data.user\n      };\n    } catch (error) {\n      console.error('Token verification error:', error);\n      return { valid: false, error: error.message };\n    }\n  }\n\n  /**\n   * Get stored token\n   */\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  /**\n   * Get stored user info\n   */\n  getUser() {\n    const userStr = localStorage.getItem(this.userKey);\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated() {\n    const token = this.getToken();\n    const user = this.getUser();\n    return !!(token && user);\n  }\n\n  /**\n   * Make authenticated API requests\n   */\n  async apiRequest(url, options = {}) {\n    const token = this.getToken();\n    \n    if (!token) {\n      throw new Error('No authentication token available');\n    }\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n      ...options.headers\n    };\n\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n\n    // Handle unauthorized responses\n    if (response.status === 401) {\n      this.logout();\n      throw new Error('Session expired. Please log in again.');\n    }\n\n    return response;\n  }\n\n  /**\n   * Set cookie with expiration\n   */\n  setCookie(name, value, maxAge) {\n    const expires = new Date();\n    expires.setTime(expires.getTime() + (maxAge * 1000));\n    \n    document.cookie = `${name}=${value}; expires=${expires.toUTCString()}; path=/; SameSite=Strict; Secure`;\n  }\n\n  /**\n   * Delete cookie\n   */\n  deleteCookie(name) {\n    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n  }\n\n  /**\n   * Auto-refresh token before expiration\n   */\n  startTokenRefresh() {\n    const checkInterval = 5 * 60 * 1000; // Check every 5 minutes\n    \n    setInterval(async () => {\n      const token = this.getToken();\n      if (token) {\n        const verification = await this.verifyToken(token);\n        if (!verification.valid) {\n          console.log('Token expired, logging out');\n          this.logout();\n          // Optionally redirect to login page\n          window.location.href = '/admin/login.html';\n        }\n      }\n    }, checkInterval);\n  }\n\n  /**\n   * Handle authentication redirect\n   */\n  handleAuthRedirect() {\n    if (!this.isAuthenticated()) {\n      const currentPath = window.location.pathname;\n      const protectedPaths = ['/admin/', '/api/admin/', '/api/portfolio/', '/api/content/'];\n      \n      const isProtected = protectedPaths.some(path => currentPath.startsWith(path));\n      \n      if (isProtected && !currentPath.includes('/admin/login.html')) {\n        window.location.href = '/admin/login.html?redirect=' + encodeURIComponent(currentPath);\n      }\n    }\n  }\n}\n\n// Global instance\nwindow.EdgeAuth = new EdgeAuthClient();\n\n// Auto-start token refresh and handle redirects when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.EdgeAuth.startTokenRefresh();\n  window.EdgeAuth.handleAuthRedirect();\n});\n\n// Export for module usage\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = EdgeAuthClient;\n}"